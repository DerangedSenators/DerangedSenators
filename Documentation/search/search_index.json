{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Deranged Senators Documentation Documentation Site for Deranged Senators. This site holds all of the documentation for our work. More to Follow!","title":"Deranged Senators Documentation"},{"location":"#deranged-senators-documentation","text":"Documentation Site for Deranged Senators. This site holds all of the documentation for our work. More to Follow!","title":"Deranged Senators Documentation"},{"location":"Cops%20And%20Robbers/","text":"Cops And Robbers Cops and Robbers is a 2D online multiplayer game developed using Unity, currently in development by Deranged Senators. These pages contain the documentation for the game","title":"Cops And Robbers"},{"location":"Cops%20And%20Robbers/#cops-and-robbers","text":"Cops and Robbers is a 2D online multiplayer game developed using Unity, currently in development by Deranged Senators. These pages contain the documentation for the game","title":"Cops And Robbers"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/","text":"Classes class ChatController class EnvMapAnimator class GameManager namespace Me namespace DerangedSenators namespace CopsAndRobbers This script is responible for the fucntion of the healthbar and Dmg for testing class AttackCircle class CoinPickup class HealthBar class MainMenu class MoneyManager class PlayerAttack class PlayerHealth class PlayerMovement class Patrol class PauseMenu class TimeManager Updated on 29 November 2020 at 23:16:24 UTC","title":"Classes"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/#classes","text":"class ChatController class EnvMapAnimator class GameManager namespace Me namespace DerangedSenators namespace CopsAndRobbers This script is responible for the fucntion of the healthbar and Dmg for testing class AttackCircle class CoinPickup class HealthBar class MainMenu class MoneyManager class PlayerAttack class PlayerHealth class PlayerMovement class Patrol class PauseMenu class TimeManager Updated on 29 November 2020 at 23:16:24 UTC","title":"Classes"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classChatController/","text":"ChatController Inherits from MonoBehaviour Public Attributes Name TMP_InputField TMP_ChatInput TMP_Text TMP_ChatOutput Scrollbar ChatScrollbar Public Attributes Documentation variable TMP_ChatInput TMP_InputField TMP_ChatInput ; variable TMP_ChatOutput TMP_Text TMP_ChatOutput ; variable ChatScrollbar Scrollbar ChatScrollbar ; Updated on 29 November 2020 at 23:16:24 UTC","title":"ChatController"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classChatController/#chatcontroller","text":"Inherits from MonoBehaviour","title":"ChatController"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classChatController/#public-attributes","text":"Name TMP_InputField TMP_ChatInput TMP_Text TMP_ChatOutput Scrollbar ChatScrollbar","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classChatController/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classChatController/#variable-tmp_chatinput","text":"TMP_InputField TMP_ChatInput ;","title":"variable TMP_ChatInput"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classChatController/#variable-tmp_chatoutput","text":"TMP_Text TMP_ChatOutput ;","title":"variable TMP_ChatOutput"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classChatController/#variable-chatscrollbar","text":"Scrollbar ChatScrollbar ; Updated on 29 November 2020 at 23:16:24 UTC","title":"variable ChatScrollbar"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classEnvMapAnimator/","text":"EnvMapAnimator Inherits from MonoBehaviour Public Attributes Name Vector3 RotationSpeeds Public Attributes Documentation variable RotationSpeeds Vector3 RotationSpeeds ; Updated on 29 November 2020 at 23:16:24 UTC","title":"EnvMapAnimator"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classEnvMapAnimator/#envmapanimator","text":"Inherits from MonoBehaviour","title":"EnvMapAnimator"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classEnvMapAnimator/#public-attributes","text":"Name Vector3 RotationSpeeds","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classEnvMapAnimator/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classEnvMapAnimator/#variable-rotationspeeds","text":"Vector3 RotationSpeeds ; Updated on 29 November 2020 at 23:16:24 UTC","title":"variable RotationSpeeds"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classGameManager/","text":"GameManager Inherits from MonoBehaviour Public Attributes Name GameManager gameManager Public Attributes Documentation variable gameManager static GameManager gameManager ; Updated on 29 November 2020 at 23:16:24 UTC","title":"GameManager"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classGameManager/#gamemanager","text":"Inherits from MonoBehaviour","title":"GameManager"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classGameManager/#public-attributes","text":"Name GameManager gameManager","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classGameManager/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classGameManager/#variable-gamemanager","text":"static GameManager gameManager ; Updated on 29 November 2020 at 23:16:24 UTC","title":"variable gameManager"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AttackCircle/","text":"Me::DerangedSenators::CopsAndRobbers::AttackCircle Inherits from MonoBehaviour Public Attributes Name PlayerAttack playerAttack Public Attributes Documentation variable playerAttack PlayerAttack playerAttack ; Updated on 29 November 2020 at 23:16:24 UTC","title":"Me::DerangedSenators::CopsAndRobbers::AttackCircle"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AttackCircle/#mederangedsenatorscopsandrobbersattackcircle","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::AttackCircle"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AttackCircle/#public-attributes","text":"Name PlayerAttack playerAttack","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AttackCircle/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1AttackCircle/#variable-playerattack","text":"PlayerAttack playerAttack ; Updated on 29 November 2020 at 23:16:24 UTC","title":"variable playerAttack"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CoinPickup/","text":"Me::DerangedSenators::CopsAndRobbers::CoinPickup Inherits from MonoBehaviour Updated on 29 November 2020 at 23:16:24 UTC","title":"Me::DerangedSenators::CopsAndRobbers::CoinPickup"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1CoinPickup/#mederangedsenatorscopsandrobberscoinpickup","text":"Inherits from MonoBehaviour Updated on 29 November 2020 at 23:16:24 UTC","title":"Me::DerangedSenators::CopsAndRobbers::CoinPickup"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/","text":"Me::DerangedSenators::CopsAndRobbers::HealthBar Inherits from MonoBehaviour Public Functions Name void SetMaxHealth (float health) Setting health bar to max health. void SetHealth (float health) Updating health bar to current health. Public Attributes Name Slider slider Gradient gradient Image fill Public Functions Documentation function SetMaxHealth inline void SetMaxHealth ( float health ) Setting health bar to max health. Parameters : health Amount of health to be set to health bar at the beginning. function SetHealth inline void SetHealth ( float health ) Updating health bar to current health. Parameters : health Amount of health to be set to health bar. Public Attributes Documentation variable slider Slider slider ; variable gradient Gradient gradient ; variable fill Image fill ; Updated on 29 November 2020 at 23:16:24 UTC","title":"Me::DerangedSenators::CopsAndRobbers::HealthBar"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#mederangedsenatorscopsandrobbershealthbar","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::HealthBar"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#public-functions","text":"Name void SetMaxHealth (float health) Setting health bar to max health. void SetHealth (float health) Updating health bar to current health.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#public-attributes","text":"Name Slider slider Gradient gradient Image fill","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#function-setmaxhealth","text":"inline void SetMaxHealth ( float health ) Setting health bar to max health. Parameters : health Amount of health to be set to health bar at the beginning.","title":"function SetMaxHealth"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#function-sethealth","text":"inline void SetHealth ( float health ) Updating health bar to current health. Parameters : health Amount of health to be set to health bar.","title":"function SetHealth"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#variable-slider","text":"Slider slider ;","title":"variable slider"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#variable-gradient","text":"Gradient gradient ;","title":"variable gradient"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1HealthBar/#variable-fill","text":"Image fill ; Updated on 29 November 2020 at 23:16:24 UTC","title":"variable fill"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MainMenu/","text":"Me::DerangedSenators::CopsAndRobbers::MainMenu Inherits from MonoBehaviour Public Functions Name void PlayGame () Start the game void QuitGame () Quit the application Public Functions Documentation function PlayGame inline void PlayGame () Start the game function QuitGame inline void QuitGame () Quit the application Updated on 29 November 2020 at 23:16:24 UTC","title":"Me::DerangedSenators::CopsAndRobbers::MainMenu"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MainMenu/#mederangedsenatorscopsandrobbersmainmenu","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::MainMenu"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MainMenu/#public-functions","text":"Name void PlayGame () Start the game void QuitGame () Quit the application","title":"Public Functions"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MainMenu/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MainMenu/#function-playgame","text":"inline void PlayGame () Start the game","title":"function PlayGame"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MainMenu/#function-quitgame","text":"inline void QuitGame () Quit the application Updated on 29 November 2020 at 23:16:24 UTC","title":"function QuitGame"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MoneyManager/","text":"Me::DerangedSenators::CopsAndRobbers::MoneyManager Inherits from MonoBehaviour Public Functions Name void CollectMoney () Adds $100 to treasury. long getMoneyCount () Get amount of money in treasury. Public Functions Documentation function CollectMoney inline void CollectMoney () Adds $100 to treasury. function getMoneyCount inline long getMoneyCount () Get amount of money in treasury. Return : amount of amount in treasury Updated on 29 November 2020 at 23:16:24 UTC","title":"Me::DerangedSenators::CopsAndRobbers::MoneyManager"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MoneyManager/#mederangedsenatorscopsandrobbersmoneymanager","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::MoneyManager"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MoneyManager/#public-functions","text":"Name void CollectMoney () Adds $100 to treasury. long getMoneyCount () Get amount of money in treasury.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MoneyManager/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MoneyManager/#function-collectmoney","text":"inline void CollectMoney () Adds $100 to treasury.","title":"function CollectMoney"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1MoneyManager/#function-getmoneycount","text":"inline long getMoneyCount () Get amount of money in treasury. Return : amount of amount in treasury Updated on 29 November 2020 at 23:16:24 UTC","title":"function getMoneyCount"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerAttack Inherits from MonoBehaviour Public Functions Name void OnDrawGizmosSelected () Draw a circle around the player showing the attackRadius visually. Vector3 GetAttackPoint () Public Attributes Name LayerMask enemyLayer float damage Public Functions Documentation function OnDrawGizmosSelected inline void OnDrawGizmosSelected () Draw a circle around the player showing the attackRadius visually. function GetAttackPoint inline Vector3 GetAttackPoint () Public Attributes Documentation variable enemyLayer LayerMask enemyLayer ; variable damage float damage = 10f ; Updated on 29 November 2020 at 23:16:24 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerAttack"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#mederangedsenatorscopsandrobbersplayerattack","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::PlayerAttack"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#public-functions","text":"Name void OnDrawGizmosSelected () Draw a circle around the player showing the attackRadius visually. Vector3 GetAttackPoint ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#public-attributes","text":"Name LayerMask enemyLayer float damage","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#function-ondrawgizmosselected","text":"inline void OnDrawGizmosSelected () Draw a circle around the player showing the attackRadius visually.","title":"function OnDrawGizmosSelected"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#function-getattackpoint","text":"inline Vector3 GetAttackPoint ()","title":"function GetAttackPoint"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#variable-enemylayer","text":"LayerMask enemyLayer ;","title":"variable enemyLayer"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerAttack/#variable-damage","text":"float damage = 10f ; Updated on 29 November 2020 at 23:16:24 UTC","title":"variable damage"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerHealth Inherits from MonoBehaviour Public Functions Name void Start () At the start of the project the player's health will equal to the max health void Update () This function checks if a user Used Space if it does the player will take 1.5 dmg void Damage (float damage) This function will lower the current player health by set amount Public Attributes Name float maxHealth float currentHealth HealthBar healthBar Public Functions Documentation function Start inline void Start () At the start of the project the player's health will equal to the max health function Update inline void Update () This function checks if a user Used Space if it does the player will take 1.5 dmg function Damage inline void Damage ( float damage ) This function will lower the current player health by set amount Parameters : damage Amount of damage taken, to update health bar Public Attributes Documentation variable maxHealth float maxHealth = 100f ; variable currentHealth float currentHealth ; variable healthBar HealthBar healthBar ; Updated on 29 November 2020 at 23:16:24 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerHealth"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#mederangedsenatorscopsandrobbersplayerhealth","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::PlayerHealth"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#public-functions","text":"Name void Start () At the start of the project the player's health will equal to the max health void Update () This function checks if a user Used Space if it does the player will take 1.5 dmg void Damage (float damage) This function will lower the current player health by set amount","title":"Public Functions"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#public-attributes","text":"Name float maxHealth float currentHealth HealthBar healthBar","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#function-start","text":"inline void Start () At the start of the project the player's health will equal to the max health","title":"function Start"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#function-update","text":"inline void Update () This function checks if a user Used Space if it does the player will take 1.5 dmg","title":"function Update"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#function-damage","text":"inline void Damage ( float damage ) This function will lower the current player health by set amount Parameters : damage Amount of damage taken, to update health bar","title":"function Damage"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#variable-maxhealth","text":"float maxHealth = 100f ;","title":"variable maxHealth"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#variable-currenthealth","text":"float currentHealth ;","title":"variable currentHealth"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerHealth/#variable-healthbar","text":"HealthBar healthBar ; Updated on 29 November 2020 at 23:16:24 UTC","title":"variable healthBar"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/","text":"Me::DerangedSenators::CopsAndRobbers::PlayerMovement Inherits from MonoBehaviour Public Functions Name Vector3 GetPosition () Public Attributes Name Animator animator float moveSpeed Rigidbody2D rigidBody float runSpeed Public Functions Documentation function GetPosition inline Vector3 GetPosition () Public Attributes Documentation variable animator Animator animator ; variable moveSpeed float moveSpeed = 5f ; variable rigidBody Rigidbody2D rigidBody ; variable runSpeed float runSpeed = 40f ; Updated on 29 November 2020 at 23:16:24 UTC","title":"Me::DerangedSenators::CopsAndRobbers::PlayerMovement"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#mederangedsenatorscopsandrobbersplayermovement","text":"Inherits from MonoBehaviour","title":"Me::DerangedSenators::CopsAndRobbers::PlayerMovement"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#public-functions","text":"Name Vector3 GetPosition ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#public-attributes","text":"Name Animator animator float moveSpeed Rigidbody2D rigidBody float runSpeed","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#function-getposition","text":"inline Vector3 GetPosition ()","title":"function GetPosition"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#variable-animator","text":"Animator animator ;","title":"variable animator"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#variable-movespeed","text":"float moveSpeed = 5f ;","title":"variable moveSpeed"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#variable-rigidbody","text":"Rigidbody2D rigidBody ;","title":"variable rigidBody"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classMe_1_1DerangedSenators_1_1CopsAndRobbers_1_1PlayerMovement/#variable-runspeed","text":"float runSpeed = 40f ; Updated on 29 November 2020 at 23:16:24 UTC","title":"variable runSpeed"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPatrol/","text":"Patrol Inherits from MonoBehaviour Public Attributes Name float speed float waitTime float startWaitTime Transform [] moveSpots Animator animator float moveSpeed Rigidbody2D rb Public Attributes Documentation variable speed float speed ; variable waitTime float waitTime ; variable startWaitTime float startWaitTime ; variable moveSpots Transform [] moveSpots ; variable animator Animator animator ; variable moveSpeed float moveSpeed = 5f ; variable rb Rigidbody2D rb ; Updated on 29 November 2020 at 23:16:24 UTC","title":"Patrol"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPatrol/#patrol","text":"Inherits from MonoBehaviour","title":"Patrol"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPatrol/#public-attributes","text":"Name float speed float waitTime float startWaitTime Transform [] moveSpots Animator animator float moveSpeed Rigidbody2D rb","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPatrol/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPatrol/#variable-speed","text":"float speed ;","title":"variable speed"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPatrol/#variable-waittime","text":"float waitTime ;","title":"variable waitTime"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPatrol/#variable-startwaittime","text":"float startWaitTime ;","title":"variable startWaitTime"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPatrol/#variable-movespots","text":"Transform [] moveSpots ;","title":"variable moveSpots"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPatrol/#variable-animator","text":"Animator animator ;","title":"variable animator"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPatrol/#variable-movespeed","text":"float moveSpeed = 5f ;","title":"variable moveSpeed"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPatrol/#variable-rb","text":"Rigidbody2D rb ; Updated on 29 November 2020 at 23:16:24 UTC","title":"variable rb"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPauseMenu/","text":"PauseMenu Inherits from MonoBehaviour Public Functions Name void Resume () void LoadMenu () void QuitGame () Public Attributes Name bool GameIsPaused GameObject pauseMenuUI Public Functions Documentation function Resume inline void Resume () function LoadMenu inline void LoadMenu () function QuitGame inline void QuitGame () Public Attributes Documentation variable GameIsPaused static bool GameIsPaused = false ; variable pauseMenuUI GameObject pauseMenuUI ; Updated on 29 November 2020 at 23:16:24 UTC","title":"PauseMenu"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPauseMenu/#pausemenu","text":"Inherits from MonoBehaviour","title":"PauseMenu"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPauseMenu/#public-functions","text":"Name void Resume () void LoadMenu () void QuitGame ()","title":"Public Functions"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPauseMenu/#public-attributes","text":"Name bool GameIsPaused GameObject pauseMenuUI","title":"Public Attributes"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPauseMenu/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPauseMenu/#function-resume","text":"inline void Resume ()","title":"function Resume"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPauseMenu/#function-loadmenu","text":"inline void LoadMenu ()","title":"function LoadMenu"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPauseMenu/#function-quitgame","text":"inline void QuitGame ()","title":"function QuitGame"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPauseMenu/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPauseMenu/#variable-gameispaused","text":"static bool GameIsPaused = false ;","title":"variable GameIsPaused"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classPauseMenu/#variable-pausemenuui","text":"GameObject pauseMenuUI ; Updated on 29 November 2020 at 23:16:24 UTC","title":"variable pauseMenuUI"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classTimeManager/","text":"TimeManager Inherits from MonoBehaviour Public Functions Name void EndTimer () Call this method to force-end the timer + move to next scene. Public Functions Documentation function EndTimer inline void EndTimer () Call this method to force-end the timer + move to next scene. Updated on 29 November 2020 at 23:16:24 UTC","title":"TimeManager"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classTimeManager/#timemanager","text":"Inherits from MonoBehaviour","title":"TimeManager"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classTimeManager/#public-functions","text":"Name void EndTimer () Call this method to force-end the timer + move to next scene.","title":"Public Functions"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classTimeManager/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Cops%20And%20Robbers/copsandrobbers/Classes/classTimeManager/#function-endtimer","text":"inline void EndTimer () Call this method to force-end the timer + move to next scene. Updated on 29 November 2020 at 23:16:24 UTC","title":"function EndTimer"},{"location":"Cops%20And%20Robbers/copsandrobbers/Examples/","text":"Examples Updated on 29 November 2020 at 23:16:24 UTC","title":"Examples"},{"location":"Cops%20And%20Robbers/copsandrobbers/Examples/#examples","text":"Updated on 29 November 2020 at 23:16:24 UTC","title":"Examples"},{"location":"Cops%20And%20Robbers/copsandrobbers/Modules/","text":"Modules Updated on 29 November 2020 at 23:16:24 UTC","title":"Modules"},{"location":"Cops%20And%20Robbers/copsandrobbers/Modules/#modules","text":"Updated on 29 November 2020 at 23:16:24 UTC","title":"Modules"},{"location":"Cops%20And%20Robbers/copsandrobbers/Namespaces/","text":"Namespaces namespace Me namespace DerangedSenators namespace CopsAndRobbers This script is responible for the fucntion of the healthbar and Dmg for testing Updated on 29 November 2020 at 23:16:24 UTC","title":"Namespaces"},{"location":"Cops%20And%20Robbers/copsandrobbers/Namespaces/#namespaces","text":"namespace Me namespace DerangedSenators namespace CopsAndRobbers This script is responible for the fucntion of the healthbar and Dmg for testing Updated on 29 November 2020 at 23:16:24 UTC","title":"Namespaces"},{"location":"Cops%20And%20Robbers/copsandrobbers/Namespaces/namespaceMe/","text":"Me Namespaces Name Me::DerangedSenators Updated on 29 November 2020 at 23:16:24 UTC","title":"Me"},{"location":"Cops%20And%20Robbers/copsandrobbers/Namespaces/namespaceMe/#me","text":"","title":"Me"},{"location":"Cops%20And%20Robbers/copsandrobbers/Namespaces/namespaceMe/#namespaces","text":"Name Me::DerangedSenators Updated on 29 November 2020 at 23:16:24 UTC","title":"Namespaces"},{"location":"Cops%20And%20Robbers/copsandrobbers/Namespaces/namespaceMe_1_1DerangedSenators/","text":"Me::DerangedSenators Namespaces Name Me::DerangedSenators::CopsAndRobbers This script is responible for the fucntion of the healthbar and Dmg for testing Updated on 29 November 2020 at 23:16:24 UTC","title":"Me::DerangedSenators"},{"location":"Cops%20And%20Robbers/copsandrobbers/Namespaces/namespaceMe_1_1DerangedSenators/#mederangedsenators","text":"","title":"Me::DerangedSenators"},{"location":"Cops%20And%20Robbers/copsandrobbers/Namespaces/namespaceMe_1_1DerangedSenators/#namespaces","text":"Name Me::DerangedSenators::CopsAndRobbers This script is responible for the fucntion of the healthbar and Dmg for testing Updated on 29 November 2020 at 23:16:24 UTC","title":"Namespaces"},{"location":"Cops%20And%20Robbers/copsandrobbers/Namespaces/namespaceMe_1_1DerangedSenators_1_1CopsAndRobbers/","text":"Me::DerangedSenators::CopsAndRobbers This script is responible for the fucntion of the healthbar and Dmg for testing Classes Name class Me::DerangedSenators::CopsAndRobbers::AttackCircle class Me::DerangedSenators::CopsAndRobbers::CoinPickup class Me::DerangedSenators::CopsAndRobbers::HealthBar class Me::DerangedSenators::CopsAndRobbers::MainMenu class Me::DerangedSenators::CopsAndRobbers::MoneyManager class Me::DerangedSenators::CopsAndRobbers::PlayerAttack class Me::DerangedSenators::CopsAndRobbers::PlayerHealth class Me::DerangedSenators::CopsAndRobbers::PlayerMovement Updated on 29 November 2020 at 23:16:24 UTC","title":"Me::DerangedSenators::CopsAndRobbers"},{"location":"Cops%20And%20Robbers/copsandrobbers/Namespaces/namespaceMe_1_1DerangedSenators_1_1CopsAndRobbers/#mederangedsenatorscopsandrobbers","text":"This script is responible for the fucntion of the healthbar and Dmg for testing","title":"Me::DerangedSenators::CopsAndRobbers"},{"location":"Cops%20And%20Robbers/copsandrobbers/Namespaces/namespaceMe_1_1DerangedSenators_1_1CopsAndRobbers/#classes","text":"Name class Me::DerangedSenators::CopsAndRobbers::AttackCircle class Me::DerangedSenators::CopsAndRobbers::CoinPickup class Me::DerangedSenators::CopsAndRobbers::HealthBar class Me::DerangedSenators::CopsAndRobbers::MainMenu class Me::DerangedSenators::CopsAndRobbers::MoneyManager class Me::DerangedSenators::CopsAndRobbers::PlayerAttack class Me::DerangedSenators::CopsAndRobbers::PlayerHealth class Me::DerangedSenators::CopsAndRobbers::PlayerMovement Updated on 29 November 2020 at 23:16:24 UTC","title":"Classes"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/","text":"Effective Commits and Code Reviews This document will detail how to make the best commits and how to effectively review your peer's work Commits A commit is a term used for saving a change to a file or a set of files. There are several components to a commit. 1. The changes you have made to the files (additions and deletions) 2. A commit hash: A hash of the commit used to identify the commit 3. A commit message and summary(optional): The Commit message is a short (50 characters max) statement of the changes made in the commit and you can include a summary if you think that a wider explanation is neccessary. Please read the following for more information Comment Convention When commiting, make sure that each commit as consise as possible and DO NOT add more files than neccessary to each commit. This will cause a lot of headaches should you need to revert a small change in an unneccesarily large commit and it may also result in merge conflicts How to commit Once you have saved your changes, open your git client or terminal and stage the changes using git add <filename(s) or * for all changes> Commit all stage files using git commit -m \"MESSAGE HERE\" Push the changes to your github repository using git push Your files are now uploaded to github and are ready for peer review to be accepted into the main repository Creating a Pull Request Once you have uploaded your changes to Github, and the source is ready to be merged into the main repository (It could take many commits to reach this stage), Go ahead and open a pull request. Here you will have to add a title and a summary of the changes you have made. You must also add a reviewer (or multiple). This should be someone who knows the task and is able to provide a thorough review. You will also need to assign yourself and whoever worked with you on those commits to the pull request. Feel free to also include tags to make it easier to understand. Once you have filled out the form, you are ready to open the pull request Once you open a pull request, All changes that you make on that branch is tracked by the pull request so if you want to work on a different task, be sure to checkout a different branch Code Review Code review is a step of development when a peer goes through your changes before it is admitted into the main repository to keep the code as bug free and clean as possible. Effective code review is crucial for faster collaborative development. Reviewing Code When reviewing code, ensure that you fully understand the changes that have been made and if applicable, be sure to test those changes for bugs. Feel free to use the comments section to find out more and to provide feedback. Reviewers are able to accept, deny and request improvement on changes. Be sure to make full use of this to maintain the repository as best as possible If you are having your change reviewed, be sure to be active on the pull request page so that patches, if required can be submitted as fast as possible to spend as less time as you can on the code review phase. Updating Source As time goes on, others on the team will merge their changes into the main repository leaving yours behind. To ensure that your fork is up to date, you can do the following: # Add the remote, call it \"upstream\": git remote add upstream https://github.com/whoever/whatever.git # This should be a link to the main repository # Fetch all the branches of that remote into remote-tracking branches, # such as upstream/main: git fetch upstream # Make sure that you're on your main branch: git checkout main # Rewrite your main branch so that any commits of yours that # aren't already in upstream/main are replayed on top of that # other branch: git rebase upstream/main or git merge upstream/main if you don't want to rewrite history on your branch Once you have rebased locally, It is recommended to push the changes back onto your remote on Github. You can do that with: git push -f origin main You only need to use the -f flag the first time after a rebase Github Documentation for updating a Fork","title":"Effective Commits and Code Reviews"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/#effective-commits-and-code-reviews","text":"This document will detail how to make the best commits and how to effectively review your peer's work","title":"Effective Commits and Code Reviews"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/#commits","text":"A commit is a term used for saving a change to a file or a set of files. There are several components to a commit. 1. The changes you have made to the files (additions and deletions) 2. A commit hash: A hash of the commit used to identify the commit 3. A commit message and summary(optional): The Commit message is a short (50 characters max) statement of the changes made in the commit and you can include a summary if you think that a wider explanation is neccessary. Please read the following for more information Comment Convention When commiting, make sure that each commit as consise as possible and DO NOT add more files than neccessary to each commit. This will cause a lot of headaches should you need to revert a small change in an unneccesarily large commit and it may also result in merge conflicts","title":"Commits"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/#how-to-commit","text":"Once you have saved your changes, open your git client or terminal and stage the changes using git add <filename(s) or * for all changes> Commit all stage files using git commit -m \"MESSAGE HERE\" Push the changes to your github repository using git push Your files are now uploaded to github and are ready for peer review to be accepted into the main repository","title":"How to commit"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/#creating-a-pull-request","text":"Once you have uploaded your changes to Github, and the source is ready to be merged into the main repository (It could take many commits to reach this stage), Go ahead and open a pull request. Here you will have to add a title and a summary of the changes you have made. You must also add a reviewer (or multiple). This should be someone who knows the task and is able to provide a thorough review. You will also need to assign yourself and whoever worked with you on those commits to the pull request. Feel free to also include tags to make it easier to understand. Once you have filled out the form, you are ready to open the pull request Once you open a pull request, All changes that you make on that branch is tracked by the pull request so if you want to work on a different task, be sure to checkout a different branch","title":"Creating a Pull Request"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/#code-review","text":"Code review is a step of development when a peer goes through your changes before it is admitted into the main repository to keep the code as bug free and clean as possible. Effective code review is crucial for faster collaborative development.","title":"Code Review"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/#reviewing-code","text":"When reviewing code, ensure that you fully understand the changes that have been made and if applicable, be sure to test those changes for bugs. Feel free to use the comments section to find out more and to provide feedback. Reviewers are able to accept, deny and request improvement on changes. Be sure to make full use of this to maintain the repository as best as possible If you are having your change reviewed, be sure to be active on the pull request page so that patches, if required can be submitted as fast as possible to spend as less time as you can on the code review phase.","title":"Reviewing Code"},{"location":"Overview/collaboration/Effective%20Commits%20and%20Code%20Reviews/#updating-source","text":"As time goes on, others on the team will merge their changes into the main repository leaving yours behind. To ensure that your fork is up to date, you can do the following: # Add the remote, call it \"upstream\": git remote add upstream https://github.com/whoever/whatever.git # This should be a link to the main repository # Fetch all the branches of that remote into remote-tracking branches, # such as upstream/main: git fetch upstream # Make sure that you're on your main branch: git checkout main # Rewrite your main branch so that any commits of yours that # aren't already in upstream/main are replayed on top of that # other branch: git rebase upstream/main or git merge upstream/main if you don't want to rewrite history on your branch Once you have rebased locally, It is recommended to push the changes back onto your remote on Github. You can do that with: git push -f origin main You only need to use the -f flag the first time after a rebase Github Documentation for updating a Fork","title":"Updating Source"},{"location":"Overview/collaboration/Get%20Started/","text":"Getting started with Development Follow the following steps to get yourself ready for commiting changes to the repositories Get the source Fork the repository to your account Clone the newly forked repository to your computer with a git client (we are using gitkraken but anything will work) The source will be downloaded and you are ready for development. Good Luck Making Changes Once you have made changes, you will need to upload these to the main repository. By default, our repository does not allow direct pushing to keep the code clean and enforce peer review. You will therefore have to complete the following steps: Commit your changes using your git client. Smaller commits are generally better as they are easier to review and if needed easier to revert Push your changes to github From github, open a pull request to the main repository Fill out the pull request form and assign yourself and add a reviewer (can have multiple). Add other attributes as necessary Once you have opened the pull request, you will have to wait for reviewers to read and give feedback on your commits. If they request changes, then make them and merge into the request. Once they approve you can go ahead and merge your code providing there are no merge conflicts. If you find merge conflicts, then you will have to resolve these by picking which code to keep and what to let go","title":"Getting started with Development"},{"location":"Overview/collaboration/Get%20Started/#getting-started-with-development","text":"Follow the following steps to get yourself ready for commiting changes to the repositories","title":"Getting started with Development"},{"location":"Overview/collaboration/Get%20Started/#get-the-source","text":"Fork the repository to your account Clone the newly forked repository to your computer with a git client (we are using gitkraken but anything will work) The source will be downloaded and you are ready for development. Good Luck","title":"Get the source"},{"location":"Overview/collaboration/Get%20Started/#making-changes","text":"Once you have made changes, you will need to upload these to the main repository. By default, our repository does not allow direct pushing to keep the code clean and enforce peer review. You will therefore have to complete the following steps: Commit your changes using your git client. Smaller commits are generally better as they are easier to review and if needed easier to revert Push your changes to github From github, open a pull request to the main repository Fill out the pull request form and assign yourself and add a reviewer (can have multiple). Add other attributes as necessary Once you have opened the pull request, you will have to wait for reviewers to read and give feedback on your commits. If they request changes, then make them and merge into the request. Once they approve you can go ahead and merge your code providing there are no merge conflicts. If you find merge conflicts, then you will have to resolve these by picking which code to keep and what to let go","title":"Making Changes"},{"location":"Overview/collaboration/Project%20Design/","text":"Project Design for our Unity Project Use of Repositories Making use of multiple repositories is a great way to manage sub-projects within the main projects. Reusable components should be managed inside its own repository and then exported as a shared library ( .dll in Windows and .so in Linux). This will effectively make it easier to track changes and show our ability to think ahead as a \"startup company\" In our case, we could split our Game ( The code which directly interacts with Unity) and other components to acheive this Semantic Versioning Semantic Versioning is the process of assinging a unique version number. We will be applying semantic versioning on our releases. Semantic versioning will work as follows: <MAJOR>.<MINOR>.<PATCH> : The Major shows major changes to the Application which may break external application connections. Minor shows changes which will not break connections and Revision indicates bug fixes. Documenting Public APIs Public APIs expose features of the application/library to external application. These features must hold information so that they can be used correctly. C# Does this in a similar way to Java does with Javadoc albiet it does not generate webpages automatically. (I am looking into that). C# uses an XML syntax for documentation and you must be familiar with it if you are working with public APIs and it will come in handy for private methods and classes as it will allow team members to understand your code easier. Reference to C# Documentation Syntax","title":"Project Design for our Unity Project"},{"location":"Overview/collaboration/Project%20Design/#project-design-for-our-unity-project","text":"","title":"Project Design for our Unity Project"},{"location":"Overview/collaboration/Project%20Design/#use-of-repositories","text":"Making use of multiple repositories is a great way to manage sub-projects within the main projects. Reusable components should be managed inside its own repository and then exported as a shared library ( .dll in Windows and .so in Linux). This will effectively make it easier to track changes and show our ability to think ahead as a \"startup company\" In our case, we could split our Game ( The code which directly interacts with Unity) and other components to acheive this","title":"Use of Repositories"},{"location":"Overview/collaboration/Project%20Design/#semantic-versioning","text":"Semantic Versioning is the process of assinging a unique version number. We will be applying semantic versioning on our releases. Semantic versioning will work as follows: <MAJOR>.<MINOR>.<PATCH> : The Major shows major changes to the Application which may break external application connections. Minor shows changes which will not break connections and Revision indicates bug fixes.","title":"Semantic Versioning"},{"location":"Overview/collaboration/Project%20Design/#documenting-public-apis","text":"Public APIs expose features of the application/library to external application. These features must hold information so that they can be used correctly. C# Does this in a similar way to Java does with Javadoc albiet it does not generate webpages automatically. (I am looking into that). C# uses an XML syntax for documentation and you must be familiar with it if you are working with public APIs and it will come in handy for private methods and classes as it will allow team members to understand your code easier. Reference to C# Documentation Syntax","title":"Documenting Public APIs"},{"location":"Overview/collaboration/Releasing/","text":"Releases from Deranged Senators We will be adopting Semantic Versioning for the majority of our projects. Release tags will be detailed as follows: <MAJOR>.<MINOR>.<PATCH>.[TAG].[HHMMDDMMYY] Tags Each release will come with a tag. The current allowed tags are: Tag Definition Pre-Release Description R Release Used to Mark a release RC Release Candidate An internal release to check for critical problems before releasing OB Open Beta Public Beta Program CB Closed Beta Private Beta Program A Alpha Alpha Builds are used for userend products which have not yet attained beta level DP Developer Preview Developer Previews give the public access to unreleased APIs to allow developers to test and begin integrating them into their products Tag Formatting A tag will be formatted as follows: {TAG}{CUMULATIVE_VALUE} The Cumulative value is a number which increments each time with a particular tag release. The cumulative value resets to 1 whenever the major value increases. RC values also reset to 1 when the corresponding R tag is published. Changelogs Changelogs are files which contain a list of changes on the current relase.In our case, Changelogs must be kept in a CHANGELOG.md in the root of the repository. The GitHub Release action will automatically take this file and use it for the body of the release. It will also automatically wipe the file once the release has been published Principles They must be human readable They must be present with every release They must be categorised to make it easier to understand Types of changes Added : New Features Changed : For changes in existing functionality Deprecated : To mark soon-to-be removed features Removed : Removed features Fixed : Bug fixes Security : Security Vulnerability Fixes Issues : Known problems regarding the release","title":"Releases from Deranged Senators"},{"location":"Overview/collaboration/Releasing/#releases-from-deranged-senators","text":"We will be adopting Semantic Versioning for the majority of our projects. Release tags will be detailed as follows: <MAJOR>.<MINOR>.<PATCH>.[TAG].[HHMMDDMMYY]","title":"Releases from Deranged Senators"},{"location":"Overview/collaboration/Releasing/#tags","text":"Each release will come with a tag. The current allowed tags are: Tag Definition Pre-Release Description R Release Used to Mark a release RC Release Candidate An internal release to check for critical problems before releasing OB Open Beta Public Beta Program CB Closed Beta Private Beta Program A Alpha Alpha Builds are used for userend products which have not yet attained beta level DP Developer Preview Developer Previews give the public access to unreleased APIs to allow developers to test and begin integrating them into their products","title":"Tags"},{"location":"Overview/collaboration/Releasing/#tag-formatting","text":"A tag will be formatted as follows: {TAG}{CUMULATIVE_VALUE} The Cumulative value is a number which increments each time with a particular tag release. The cumulative value resets to 1 whenever the major value increases. RC values also reset to 1 when the corresponding R tag is published.","title":"Tag Formatting"},{"location":"Overview/collaboration/Releasing/#changelogs","text":"Changelogs are files which contain a list of changes on the current relase.In our case, Changelogs must be kept in a CHANGELOG.md in the root of the repository. The GitHub Release action will automatically take this file and use it for the body of the release. It will also automatically wipe the file once the release has been published","title":"Changelogs"},{"location":"Overview/collaboration/Releasing/#principles","text":"They must be human readable They must be present with every release They must be categorised to make it easier to understand","title":"Principles"},{"location":"Overview/collaboration/Releasing/#types-of-changes","text":"Added : New Features Changed : For changes in existing functionality Deprecated : To mark soon-to-be removed features Removed : Removed features Fixed : Bug fixes Security : Security Vulnerability Fixes Issues : Known problems regarding the release","title":"Types of changes"},{"location":"Overview/collaboration/Reusable%20Components/","text":"Reusable Components There is a core principle in software development known as DRY. DRY stands for Don't Repeat Yourself. This document will detail the steps you can take to ensure that all components in our project are written with this principle in mind. Reasoning Our project specification says that we are a startup company preparing to release our product into the market. Typically companies plan ahead and don't stick with a single product on their portfolios. This is something we should keep in mind when creating our product. Therefore, When you begin to create a component be it scripts or assets, you must think about the reusability of that compnent. Can it be implemented into a future product. If this is the case, you must think about developing it as a reusable component. Unity Unity offers a unique solution to the creation of reusable components through the use of Custom Packages . These packages can hold scripts, native objects, assets and more. It is widely recommended that you create a custom package when creating a Unity Reusable Component. Steps towards making a custom package Speak to another team member about converting an existing component or creating a new component as a package Create another repository on our github organisation to hold the package* Follow the steps found in the unity documentation to develop your component Once ready to include in the product, Include it as a Git Dependency in the product's packages.json file. This will allow the editor to fetch the latest version directly from git, simplifying the import process C/C++ Reusable C/C++ code must be compiled into a seperate shared or static library (depending on how it needs to be used) and then imported into the project.","title":"Reusable Components"},{"location":"Overview/collaboration/Reusable%20Components/#reusable-components","text":"There is a core principle in software development known as DRY. DRY stands for Don't Repeat Yourself. This document will detail the steps you can take to ensure that all components in our project are written with this principle in mind.","title":"Reusable Components"},{"location":"Overview/collaboration/Reusable%20Components/#reasoning","text":"Our project specification says that we are a startup company preparing to release our product into the market. Typically companies plan ahead and don't stick with a single product on their portfolios. This is something we should keep in mind when creating our product. Therefore, When you begin to create a component be it scripts or assets, you must think about the reusability of that compnent. Can it be implemented into a future product. If this is the case, you must think about developing it as a reusable component. Unity Unity offers a unique solution to the creation of reusable components through the use of Custom Packages . These packages can hold scripts, native objects, assets and more. It is widely recommended that you create a custom package when creating a Unity Reusable Component.","title":"Reasoning"},{"location":"Overview/collaboration/Reusable%20Components/#steps-towards-making-a-custom-package","text":"Speak to another team member about converting an existing component or creating a new component as a package Create another repository on our github organisation to hold the package* Follow the steps found in the unity documentation to develop your component Once ready to include in the product, Include it as a Git Dependency in the product's packages.json file. This will allow the editor to fetch the latest version directly from git, simplifying the import process C/C++ Reusable C/C++ code must be compiled into a seperate shared or static library (depending on how it needs to be used) and then imported into the project.","title":"Steps towards making a custom package"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/","text":"C# Source Design Before you begin writing code in C# please take a moment to read this document as It contains the conventions that we, as a group will use throught C# classes. C# Naming Conventions Please take a look at this page for C# naming conventions Our namespace To the java package, we have namespaces in C#. This will take the form of our reverse domain all in lower case with consecutive words concatenated together: me.derangedsenators.<product>.<feature>.<subnamespace> more on namespaces here Code file structure A source file consists of, in order: License or copyright information, if present Import Statements Namespace declaration Exactly one top-level class Exactly one blank line seperating each section that is present Non-ASCII characters For non-ASCII characters, an actual Unicode or equivalent Unicode escape is used. The choice depends only on what makes the code easier to understand, although Unicode escapes outside string literals and comments are strongly discouraged. For Example: | Code | Comment | | ------------- |-------------| | string UnitAbbrev = \"\u03bcs\" | Best: perfectly clear even without a comment.| | string UnitAbbrev = \"\\u03bcs\"; // \"\u03bcs\" | Allowed, but there's no reason to do this. | | string UnitAbbrev = \"\\u03bcs\"; // Greek letter mu, \"s\" | Allowed, but awkward and prone to mistakes. | | string UnitAbbrev = \"\\u03bcs\"; | Poor: the reader has no idea what this is. | | return '\\ufeff' + Content; // byte order mark |Good: use escapes for non-printable characters, and comment if necessary. | Formatting Braces Braces are used with if , else , for , do and while statements, even when the body is empty or contains only a single statement. Variable Declaration Only have one variable per declaration Every variable declaration (field or local) declares only one variable: declarations such as int a, b; are not used. Exception: Multiple variable declarations are acceptable in the header of a for loop. Declare variables when requried Local variables are not habitually declared at the start of their containing block or block-like construct. Instead, local variables are declared close to the point they are first used (within reason), to minimize their scope. Local variable declarations typically have initializers, or are initialized immediately after declaration. Switch Statements Indentation As with all blocks, the contents of switch blocks are indented by 1 tab Deprecating Methods and Classes If code classes or methods are replaced by newer ones or are no longer maintained. The best way to do this should be: [Obsolete(\"Method1 is deprecated, please use Method2 instead.\")] // YOu must include a message here to inform developers. public void Method1() { \u2026 } If you also need this to cause an error during compilaton instead of a warning (enforcing changes to be made) add true to the obsolete attribute like this [Obsolete(\"Method1 is deprecated, please use Method2 instead.\", true)] Some parts have been adapted from (https://google.github.io/styleguide/javaguide.html) for C# Code Comments To ensure that code is self-explainable, It is recommended to add code comments. In C#, Code comments are written after a double slash for single ( // ) line or a slash and asterisk ( /* */ ) for multiline comments. Documentation Classes, Methods and functions can be documented using C# XML documentation which is automatically activated by most C# ides whenever a /// is typed above a class or method. Similar to HTML, XML makes use of tags which you can use to document your code. The description should be included in the <summary> tags.","title":"C# Source Design"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#c-source-design","text":"Before you begin writing code in C# please take a moment to read this document as It contains the conventions that we, as a group will use throught C# classes.","title":"C# Source Design"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#c-naming-conventions","text":"Please take a look at this page for C# naming conventions","title":"C# Naming Conventions"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#our-namespace","text":"To the java package, we have namespaces in C#. This will take the form of our reverse domain all in lower case with consecutive words concatenated together: me.derangedsenators.<product>.<feature>.<subnamespace> more on namespaces here","title":"Our namespace"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#code-file-structure","text":"A source file consists of, in order: License or copyright information, if present Import Statements Namespace declaration Exactly one top-level class Exactly one blank line seperating each section that is present","title":"Code file structure"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#non-ascii-characters","text":"For non-ASCII characters, an actual Unicode or equivalent Unicode escape is used. The choice depends only on what makes the code easier to understand, although Unicode escapes outside string literals and comments are strongly discouraged. For Example: | Code | Comment | | ------------- |-------------| | string UnitAbbrev = \"\u03bcs\" | Best: perfectly clear even without a comment.| | string UnitAbbrev = \"\\u03bcs\"; // \"\u03bcs\" | Allowed, but there's no reason to do this. | | string UnitAbbrev = \"\\u03bcs\"; // Greek letter mu, \"s\" | Allowed, but awkward and prone to mistakes. | | string UnitAbbrev = \"\\u03bcs\"; | Poor: the reader has no idea what this is. | | return '\\ufeff' + Content; // byte order mark |Good: use escapes for non-printable characters, and comment if necessary. |","title":"Non-ASCII characters"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#formatting","text":"","title":"Formatting"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#braces","text":"Braces are used with if , else , for , do and while statements, even when the body is empty or contains only a single statement.","title":"Braces"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#variable-declaration","text":"","title":"Variable Declaration"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#only-have-one-variable-per-declaration","text":"Every variable declaration (field or local) declares only one variable: declarations such as int a, b; are not used. Exception: Multiple variable declarations are acceptable in the header of a for loop.","title":"Only have one variable per declaration"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#declare-variables-when-requried","text":"Local variables are not habitually declared at the start of their containing block or block-like construct. Instead, local variables are declared close to the point they are first used (within reason), to minimize their scope. Local variable declarations typically have initializers, or are initialized immediately after declaration.","title":"Declare variables when requried"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#switch-statements","text":"","title":"Switch Statements"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#indentation","text":"As with all blocks, the contents of switch blocks are indented by 1 tab","title":"Indentation"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#deprecating-methods-and-classes","text":"If code classes or methods are replaced by newer ones or are no longer maintained. The best way to do this should be: [Obsolete(\"Method1 is deprecated, please use Method2 instead.\")] // YOu must include a message here to inform developers. public void Method1() { \u2026 } If you also need this to cause an error during compilaton instead of a warning (enforcing changes to be made) add true to the obsolete attribute like this [Obsolete(\"Method1 is deprecated, please use Method2 instead.\", true)] Some parts have been adapted from (https://google.github.io/styleguide/javaguide.html) for C#","title":"Deprecating Methods and Classes"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#code-comments","text":"To ensure that code is self-explainable, It is recommended to add code comments. In C#, Code comments are written after a double slash for single ( // ) line or a slash and asterisk ( /* */ ) for multiline comments.","title":"Code Comments"},{"location":"Overview/collaboration/Source%20Design%20Document%20C%23/#documentation","text":"Classes, Methods and functions can be documented using C# XML documentation which is automatically activated by most C# ides whenever a /// is typed above a class or method. Similar to HTML, XML makes use of tags which you can use to document your code. The description should be included in the <summary> tags.","title":"Documentation"},{"location":"PlayerLink/","text":"PlayerLink PlayerLink is a native multiplayer API currently in development by Deranged Senators. This API will provide developers with a server 'game-room' environment to host online multiplayer games. Here, you will find the documentation for our source code which is also available on GitHub and is licensed with the Apache 2.0 license.","title":"PlayerLink"},{"location":"PlayerLink/#playerlink","text":"PlayerLink is a native multiplayer API currently in development by Deranged Senators. This API will provide developers with a server 'game-room' environment to host online multiplayer games. Here, you will find the documentation for our source code which is also available on GitHub and is licensed with the Apache 2.0 license.","title":"PlayerLink"},{"location":"PlayerLink/Open%20Source%20Licenses/","text":"Open Source Licenses Apache License, Version 2.0 (Apache 2.0) is the preferred license for PlayerLink, and the associated extensions and plugins related to PlayerLink, released by DerangedSenators is also licensed with Apache 2.0. While the project strives to adhere to the preferred license, there are exceptions, which are handled on a case-by-case basis.","title":"Open Source Licenses"},{"location":"PlayerLink/Open%20Source%20Licenses/#open-source-licenses","text":"Apache License, Version 2.0 (Apache 2.0) is the preferred license for PlayerLink, and the associated extensions and plugins related to PlayerLink, released by DerangedSenators is also licensed with Apache 2.0. While the project strives to adhere to the preferred license, there are exceptions, which are handled on a case-by-case basis.","title":"Open Source Licenses"},{"location":"PlayerLink/playerlink/Classes/","text":"Classes class Client struct DFHValues class GameRoom class GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. class Logger struct Message struct Player class SHA256 class ServerSocket class Socket Lowest socket implementation. This class will be used by top level socket implementations. class SocketException Socket Exception class used for socket errors. class TCPServer TCPServer class based on Socket Class. Uses TCP communication and also functions as a server to listen and monitor socket connections. class TCPSocket TCPSocket Class extends the base socket class Updated on 29 November 2020 at 23:16:24 UTC","title":"Classes"},{"location":"PlayerLink/playerlink/Classes/#classes","text":"class Client struct DFHValues class GameRoom class GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. class Logger struct Message struct Player class SHA256 class ServerSocket class Socket Lowest socket implementation. This class will be used by top level socket implementations. class SocketException Socket Exception class used for socket errors. class TCPServer TCPServer class based on Socket Class. Uses TCP communication and also functions as a server to listen and monitor socket connections. class TCPSocket TCPSocket Class extends the base socket class Updated on 29 November 2020 at 23:16:24 UTC","title":"Classes"},{"location":"PlayerLink/playerlink/Classes/classClient/","text":"Client Public Functions Name Client (int playerID, sockaddr_in sockaddrIn) Public Functions Documentation function Client Client ( int playerID , sockaddr_in sockaddrIn ) Parameters : playerID A unique ID for the player sockaddrIn SockAddr information for the client Constructs a Client Type Updated on 29 November 2020 at 23:16:24 UTC","title":"Client"},{"location":"PlayerLink/playerlink/Classes/classClient/#client","text":"","title":"Client"},{"location":"PlayerLink/playerlink/Classes/classClient/#public-functions","text":"Name Client (int playerID, sockaddr_in sockaddrIn)","title":"Public Functions"},{"location":"PlayerLink/playerlink/Classes/classClient/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/playerlink/Classes/classClient/#function-client","text":"Client ( int playerID , sockaddr_in sockaddrIn ) Parameters : playerID A unique ID for the player sockaddrIn SockAddr information for the client Constructs a Client Type Updated on 29 November 2020 at 23:16:24 UTC","title":"function Client"},{"location":"PlayerLink/playerlink/Classes/classGameRoom/","text":"GameRoom More... #include <GameRoom.h> Public Functions Name void broadcast (char * message) Detailed Description class GameRoom ; A GameRoom is a class which holds all players in a game Public Functions Documentation function broadcast void broadcast ( char * message ) Parameters : message Broadcasts a message to all participants of a room Updated on 29 November 2020 at 23:16:24 UTC","title":"GameRoom"},{"location":"PlayerLink/playerlink/Classes/classGameRoom/#gameroom","text":"More... #include <GameRoom.h>","title":"GameRoom"},{"location":"PlayerLink/playerlink/Classes/classGameRoom/#public-functions","text":"Name void broadcast (char * message)","title":"Public Functions"},{"location":"PlayerLink/playerlink/Classes/classGameRoom/#detailed-description","text":"class GameRoom ; A GameRoom is a class which holds all players in a game","title":"Detailed Description"},{"location":"PlayerLink/playerlink/Classes/classGameRoom/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/playerlink/Classes/classGameRoom/#function-broadcast","text":"void broadcast ( char * message ) Parameters : message Broadcasts a message to all participants of a room Updated on 29 November 2020 at 23:16:24 UTC","title":"function broadcast"},{"location":"PlayerLink/playerlink/Classes/classGameServer/","text":"GameServer A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. #include <GameServer.h> Public Functions Name GameServer () Constructs a GameServer . ~GameServer () void start (std::string name) Starts the GameServer . Public Functions Documentation function GameServer GameServer () Constructs a GameServer . Return : function ~GameServer ~ GameServer () function start void start ( std :: string name ) Starts the GameServer . Parameters : name Updated on 29 November 2020 at 23:16:24 UTC","title":"GameServer"},{"location":"PlayerLink/playerlink/Classes/classGameServer/#gameserver","text":"A GameServer object which is used to host a game or lobby. It uses three threads to efficiently do this; An accept thread to allow new players to join, a read thread to read packets sent by players to the server and a write thread to relay those messages to the other players. #include <GameServer.h>","title":"GameServer"},{"location":"PlayerLink/playerlink/Classes/classGameServer/#public-functions","text":"Name GameServer () Constructs a GameServer . ~GameServer () void start (std::string name) Starts the GameServer .","title":"Public Functions"},{"location":"PlayerLink/playerlink/Classes/classGameServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/playerlink/Classes/classGameServer/#function-gameserver","text":"GameServer () Constructs a GameServer . Return :","title":"function GameServer"},{"location":"PlayerLink/playerlink/Classes/classGameServer/#function-gameserver_1","text":"~ GameServer ()","title":"function ~GameServer"},{"location":"PlayerLink/playerlink/Classes/classGameServer/#function-start","text":"void start ( std :: string name ) Starts the GameServer . Parameters : name Updated on 29 November 2020 at 23:16:24 UTC","title":"function start"},{"location":"PlayerLink/playerlink/Classes/classLogger/","text":"Logger Public Functions Name Logger ( Logger & otherLogger) void operator= (const Logger & ) void log (LogSeverity severity, std::string message) Logger * getLogger () Public Functions Documentation function Logger Logger ( Logger & otherLogger ) Singleton Class should not be cloneable function operator= void operator = ( const Logger & ) Singleton classes must not be assignable function log void log ( LogSeverity severity , std :: string message ) function getLogger static Logger * getLogger () Updated on 29 November 2020 at 23:16:24 UTC","title":"Logger"},{"location":"PlayerLink/playerlink/Classes/classLogger/#logger","text":"","title":"Logger"},{"location":"PlayerLink/playerlink/Classes/classLogger/#public-functions","text":"Name Logger ( Logger & otherLogger) void operator= (const Logger & ) void log (LogSeverity severity, std::string message) Logger * getLogger ()","title":"Public Functions"},{"location":"PlayerLink/playerlink/Classes/classLogger/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/playerlink/Classes/classLogger/#function-logger","text":"Logger ( Logger & otherLogger ) Singleton Class should not be cloneable","title":"function Logger"},{"location":"PlayerLink/playerlink/Classes/classLogger/#function-operator","text":"void operator = ( const Logger & ) Singleton classes must not be assignable","title":"function operator="},{"location":"PlayerLink/playerlink/Classes/classLogger/#function-log","text":"void log ( LogSeverity severity , std :: string message )","title":"function log"},{"location":"PlayerLink/playerlink/Classes/classLogger/#function-getlogger","text":"static Logger * getLogger () Updated on 29 November 2020 at 23:16:24 UTC","title":"function getLogger"},{"location":"PlayerLink/playerlink/Classes/classSHA256/","text":"SHA256 Protected Types Name typedef unsigned char uint8 typedef unsigned int uint32 typedef unsigned long long uint64 Public Functions Name void init () void update (const unsigned char * message, unsigned int len) void final (unsigned char * digest) Protected Functions Name void transform (const unsigned char * message, unsigned int block_nb) Public Attributes Name const unsigned int DIGEST_SIZE Protected Attributes Name const uint32 sha256_k const unsigned int SHA224_256_BLOCK_SIZE unsigned int m_tot_len unsigned int m_len unsigned char m_block uint32 m_h Protected Types Documentation typedef uint8 typedef unsigned char uint8 ; typedef uint32 typedef unsigned int uint32 ; typedef uint64 typedef unsigned long long uint64 ; Public Functions Documentation function init void init () function update void update ( const unsigned char * message , unsigned int len ) function final void final ( unsigned char * digest ) Protected Functions Documentation function transform void transform ( const unsigned char * message , unsigned int block_nb ) Public Attributes Documentation variable DIGEST_SIZE static const unsigned int DIGEST_SIZE = ( 256 / 8 ); Protected Attributes Documentation variable sha256_k static const uint32 sha256_k = { 0x428a2f98 , 0x71374491 , 0xb5c0fbcf , 0xe9b5dba5 , 0x3956c25b , 0x59f111f1 , 0x923f82a4 , 0xab1c5ed5 , 0xd807aa98 , 0x12835b01 , 0x243185be , 0x550c7dc3 , 0x72be5d74 , 0x80deb1fe , 0x9bdc06a7 , 0xc19bf174 , 0xe49b69c1 , 0xefbe4786 , 0x0fc19dc6 , 0x240ca1cc , 0x2de92c6f , 0x4a7484aa , 0x5cb0a9dc , 0x76f988da , 0x983e5152 , 0xa831c66d , 0xb00327c8 , 0xbf597fc7 , 0xc6e00bf3 , 0xd5a79147 , 0x06ca6351 , 0x14292967 , 0x27b70a85 , 0x2e1b2138 , 0x4d2c6dfc , 0x53380d13 , 0x650a7354 , 0x766a0abb , 0x81c2c92e , 0x92722c85 , 0xa2bfe8a1 , 0xa81a664b , 0xc24b8b70 , 0xc76c51a3 , 0xd192e819 , 0xd6990624 , 0xf40e3585 , 0x106aa070 , 0x19a4c116 , 0x1e376c08 , 0x2748774c , 0x34b0bcb5 , 0x391c0cb3 , 0x4ed8aa4a , 0x5b9cca4f , 0x682e6ff3 , 0x748f82ee , 0x78a5636f , 0x84c87814 , 0x8cc70208 , 0x90befffa , 0xa4506ceb , 0xbef9a3f7 , 0xc67178f2 }; variable SHA224_256_BLOCK_SIZE static const unsigned int SHA224_256_BLOCK_SIZE = ( 512 / 8 ); variable m_tot_len unsigned int m_tot_len ; variable m_len unsigned int m_len ; variable m_block unsigned char m_block ; variable m_h uint32 m_h ; Updated on 29 November 2020 at 23:16:24 UTC","title":"SHA256"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#sha256","text":"","title":"SHA256"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#protected-types","text":"Name typedef unsigned char uint8 typedef unsigned int uint32 typedef unsigned long long uint64","title":"Protected Types"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#public-functions","text":"Name void init () void update (const unsigned char * message, unsigned int len) void final (unsigned char * digest)","title":"Public Functions"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#protected-functions","text":"Name void transform (const unsigned char * message, unsigned int block_nb)","title":"Protected Functions"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#public-attributes","text":"Name const unsigned int DIGEST_SIZE","title":"Public Attributes"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#protected-attributes","text":"Name const uint32 sha256_k const unsigned int SHA224_256_BLOCK_SIZE unsigned int m_tot_len unsigned int m_len unsigned char m_block uint32 m_h","title":"Protected Attributes"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#protected-types-documentation","text":"","title":"Protected Types Documentation"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#typedef-uint8","text":"typedef unsigned char uint8 ;","title":"typedef uint8"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#typedef-uint32","text":"typedef unsigned int uint32 ;","title":"typedef uint32"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#typedef-uint64","text":"typedef unsigned long long uint64 ;","title":"typedef uint64"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#function-init","text":"void init ()","title":"function init"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#function-update","text":"void update ( const unsigned char * message , unsigned int len )","title":"function update"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#function-final","text":"void final ( unsigned char * digest )","title":"function final"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#function-transform","text":"void transform ( const unsigned char * message , unsigned int block_nb )","title":"function transform"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#variable-digest_size","text":"static const unsigned int DIGEST_SIZE = ( 256 / 8 );","title":"variable DIGEST_SIZE"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#variable-sha256_k","text":"static const uint32 sha256_k = { 0x428a2f98 , 0x71374491 , 0xb5c0fbcf , 0xe9b5dba5 , 0x3956c25b , 0x59f111f1 , 0x923f82a4 , 0xab1c5ed5 , 0xd807aa98 , 0x12835b01 , 0x243185be , 0x550c7dc3 , 0x72be5d74 , 0x80deb1fe , 0x9bdc06a7 , 0xc19bf174 , 0xe49b69c1 , 0xefbe4786 , 0x0fc19dc6 , 0x240ca1cc , 0x2de92c6f , 0x4a7484aa , 0x5cb0a9dc , 0x76f988da , 0x983e5152 , 0xa831c66d , 0xb00327c8 , 0xbf597fc7 , 0xc6e00bf3 , 0xd5a79147 , 0x06ca6351 , 0x14292967 , 0x27b70a85 , 0x2e1b2138 , 0x4d2c6dfc , 0x53380d13 , 0x650a7354 , 0x766a0abb , 0x81c2c92e , 0x92722c85 , 0xa2bfe8a1 , 0xa81a664b , 0xc24b8b70 , 0xc76c51a3 , 0xd192e819 , 0xd6990624 , 0xf40e3585 , 0x106aa070 , 0x19a4c116 , 0x1e376c08 , 0x2748774c , 0x34b0bcb5 , 0x391c0cb3 , 0x4ed8aa4a , 0x5b9cca4f , 0x682e6ff3 , 0x748f82ee , 0x78a5636f , 0x84c87814 , 0x8cc70208 , 0x90befffa , 0xa4506ceb , 0xbef9a3f7 , 0xc67178f2 };","title":"variable sha256_k"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#variable-sha224_256_block_size","text":"static const unsigned int SHA224_256_BLOCK_SIZE = ( 512 / 8 );","title":"variable SHA224_256_BLOCK_SIZE"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#variable-m_tot_len","text":"unsigned int m_tot_len ;","title":"variable m_tot_len"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#variable-m_len","text":"unsigned int m_len ;","title":"variable m_len"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#variable-m_block","text":"unsigned char m_block ;","title":"variable m_block"},{"location":"PlayerLink/playerlink/Classes/classSHA256/#variable-m_h","text":"uint32 m_h ; Updated on 29 November 2020 at 23:16:24 UTC","title":"variable m_h"},{"location":"PlayerLink/playerlink/Classes/classServerSocket/","text":"ServerSocket Public Functions Name ServerSocket (Protocols protocol, int port) ServerSocket (Protocols protocol) Public Functions Documentation function ServerSocket ServerSocket ( Protocols protocol , int port ) Parameters : protocol The Stream Protocol port The Port that the client is expected to connect to Constructs a ServerSocket with a specified listening port function ServerSocket ServerSocket ( Protocols protocol ) Parameters : protocol The Stream Protocol Constructs a ServerSocket Updated on 29 November 2020 at 23:16:24 UTC","title":"ServerSocket"},{"location":"PlayerLink/playerlink/Classes/classServerSocket/#serversocket","text":"","title":"ServerSocket"},{"location":"PlayerLink/playerlink/Classes/classServerSocket/#public-functions","text":"Name ServerSocket (Protocols protocol, int port) ServerSocket (Protocols protocol)","title":"Public Functions"},{"location":"PlayerLink/playerlink/Classes/classServerSocket/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/playerlink/Classes/classServerSocket/#function-serversocket","text":"ServerSocket ( Protocols protocol , int port ) Parameters : protocol The Stream Protocol port The Port that the client is expected to connect to Constructs a ServerSocket with a specified listening port","title":"function ServerSocket"},{"location":"PlayerLink/playerlink/Classes/classServerSocket/#function-serversocket_1","text":"ServerSocket ( Protocols protocol ) Parameters : protocol The Stream Protocol Constructs a ServerSocket Updated on 29 November 2020 at 23:16:24 UTC","title":"function ServerSocket"},{"location":"PlayerLink/playerlink/Classes/classSocket/","text":"Socket Lowest socket implementation. This class will be used by top level socket implementations. #include <Socket.h> Inherited by TCPServer , TCPSocket Public Functions Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const uint32_t getPort () const int getSocketDescriptor () const void close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance. Public Functions Documentation function Socket Socket ( int family , int type , int flag ) Constructs a Socket object. Parameters : family Address Family. type The type specification for the new socket flag The protocol used for data transmission Return : If no error occurs, socket returns a descriptor referencing the new socket. Otherwise, a value of -1 function Socket explicit Socket ( int fd ) function getAddress std :: string getAddress () const Return : Gets the address of the remote device function getPort uint32_t getPort () const Return : The port number used for this connection function getSocketDescriptor int getSocketDescriptor () const Return : The socket descriptor used for this socket function close void close () Closes the connection. function isClosed bool isClosed () Return : true if the socket connection has been closed or false if it is still open function setBlocking bool setBlocking ( bool swtch ) Allows you to set the blocking mode for this file descriptor. Parameters : swtch Sets the blocking value Return : The result of the blocking, True if blocking was successful or false if there was an issue with changing the blocking status function getLastError int getLastError () Return : The last error number Protected Attributes Documentation variable mSocketFD int mSocketFD ; File Descriptor for this socket instance. variable socketIsClosed bool socketIsClosed ; Flag if socket is open or closed. variable isBlocked bool isBlocked ; Boolean to determine if blocking is enabled on this socket instance. Updated on 29 November 2020 at 23:16:24 UTC","title":"Socket"},{"location":"PlayerLink/playerlink/Classes/classSocket/#socket","text":"Lowest socket implementation. This class will be used by top level socket implementations. #include <Socket.h> Inherited by TCPServer , TCPSocket","title":"Socket"},{"location":"PlayerLink/playerlink/Classes/classSocket/#public-functions","text":"Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const uint32_t getPort () const int getSocketDescriptor () const void close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError ()","title":"Public Functions"},{"location":"PlayerLink/playerlink/Classes/classSocket/#protected-attributes","text":"Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance.","title":"Protected Attributes"},{"location":"PlayerLink/playerlink/Classes/classSocket/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/playerlink/Classes/classSocket/#function-socket","text":"Socket ( int family , int type , int flag ) Constructs a Socket object. Parameters : family Address Family. type The type specification for the new socket flag The protocol used for data transmission Return : If no error occurs, socket returns a descriptor referencing the new socket. Otherwise, a value of -1","title":"function Socket"},{"location":"PlayerLink/playerlink/Classes/classSocket/#function-socket_1","text":"explicit Socket ( int fd )","title":"function Socket"},{"location":"PlayerLink/playerlink/Classes/classSocket/#function-getaddress","text":"std :: string getAddress () const Return : Gets the address of the remote device","title":"function getAddress"},{"location":"PlayerLink/playerlink/Classes/classSocket/#function-getport","text":"uint32_t getPort () const Return : The port number used for this connection","title":"function getPort"},{"location":"PlayerLink/playerlink/Classes/classSocket/#function-getsocketdescriptor","text":"int getSocketDescriptor () const Return : The socket descriptor used for this socket","title":"function getSocketDescriptor"},{"location":"PlayerLink/playerlink/Classes/classSocket/#function-close","text":"void close () Closes the connection.","title":"function close"},{"location":"PlayerLink/playerlink/Classes/classSocket/#function-isclosed","text":"bool isClosed () Return : true if the socket connection has been closed or false if it is still open","title":"function isClosed"},{"location":"PlayerLink/playerlink/Classes/classSocket/#function-setblocking","text":"bool setBlocking ( bool swtch ) Allows you to set the blocking mode for this file descriptor. Parameters : swtch Sets the blocking value Return : The result of the blocking, True if blocking was successful or false if there was an issue with changing the blocking status","title":"function setBlocking"},{"location":"PlayerLink/playerlink/Classes/classSocket/#function-getlasterror","text":"int getLastError () Return : The last error number","title":"function getLastError"},{"location":"PlayerLink/playerlink/Classes/classSocket/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"PlayerLink/playerlink/Classes/classSocket/#variable-msocketfd","text":"int mSocketFD ; File Descriptor for this socket instance.","title":"variable mSocketFD"},{"location":"PlayerLink/playerlink/Classes/classSocket/#variable-socketisclosed","text":"bool socketIsClosed ; Flag if socket is open or closed.","title":"variable socketIsClosed"},{"location":"PlayerLink/playerlink/Classes/classSocket/#variable-isblocked","text":"bool isBlocked ; Boolean to determine if blocking is enabled on this socket instance. Updated on 29 November 2020 at 23:16:24 UTC","title":"variable isBlocked"},{"location":"PlayerLink/playerlink/Classes/classSocketException/","text":"SocketException Socket Exception class used for socket errors. #include <SocketException.h> Inherits from exception Public Functions Name SocketException (const std::string & message) Creates a SocketException . ~SocketException () const char * what () const Public Functions Documentation function SocketException SocketException ( const std :: string & message ) Creates a SocketException . Parameters : message A description of the error Return : function ~SocketException ~ SocketException () function what const char * what () const Updated on 29 November 2020 at 23:16:24 UTC","title":"SocketException"},{"location":"PlayerLink/playerlink/Classes/classSocketException/#socketexception","text":"Socket Exception class used for socket errors. #include <SocketException.h> Inherits from exception","title":"SocketException"},{"location":"PlayerLink/playerlink/Classes/classSocketException/#public-functions","text":"Name SocketException (const std::string & message) Creates a SocketException . ~SocketException () const char * what () const","title":"Public Functions"},{"location":"PlayerLink/playerlink/Classes/classSocketException/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/playerlink/Classes/classSocketException/#function-socketexception","text":"SocketException ( const std :: string & message ) Creates a SocketException . Parameters : message A description of the error Return :","title":"function SocketException"},{"location":"PlayerLink/playerlink/Classes/classSocketException/#function-socketexception_1","text":"~ SocketException ()","title":"function ~SocketException"},{"location":"PlayerLink/playerlink/Classes/classSocketException/#function-what","text":"const char * what () const Updated on 29 November 2020 at 23:16:24 UTC","title":"function what"},{"location":"PlayerLink/playerlink/Classes/classTCPServer/","text":"TCPServer TCPServer class based on Socket Class. Uses TCP communication and also functions as a server to listen and monitor socket connections. #include <TCPServer.h> Inherits from Socket Public Functions Name TCPServer () Constructs a TCPServer object. void listen (std::string port, int backlog =5) Listens to incoming bytes on a specified port. TCPSocket accept () Method to accept incomming connection request. void monitorSocket ( TCPSocket & fd) Monitors the provided socket. void unmonitor ( TCPSocket & fd) Stops monitoring the provided socket. std::vector< TCPSocket > getSocketEvents (int timeout =10000) Gets the socket Events. Additional inherited members Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const uint32_t getPort () const int getSocketDescriptor () const void close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance. Public Functions Documentation function TCPServer TCPServer () Constructs a TCPServer object. Return : function listen void listen ( std :: string port , int backlog = 5 ) Listens to incoming bytes on a specified port. Parameters : port The port you wish to monitor backlog function accept TCPSocket accept () Method to accept incomming connection request. Return : TCPSocket Object used to hold information and methods to send/recieve information from them function monitorSocket void monitorSocket ( TCPSocket & fd ) Monitors the provided socket. Parameters : fd The File Descriptor for the socket you want to monitor function unmonitor void unmonitor ( TCPSocket & fd ) Stops monitoring the provided socket. Parameters : fd The File Descriptor for the socket you no longer want to monitor function getSocketEvents std :: vector < TCPSocket > getSocketEvents ( int timeout = 10000 ) Gets the socket Events. Parameters : timeout Return : SocketEvents in a vector Updated on 29 November 2020 at 23:16:24 UTC","title":"TCPServer"},{"location":"PlayerLink/playerlink/Classes/classTCPServer/#tcpserver","text":"TCPServer class based on Socket Class. Uses TCP communication and also functions as a server to listen and monitor socket connections. #include <TCPServer.h> Inherits from Socket","title":"TCPServer"},{"location":"PlayerLink/playerlink/Classes/classTCPServer/#public-functions","text":"Name TCPServer () Constructs a TCPServer object. void listen (std::string port, int backlog =5) Listens to incoming bytes on a specified port. TCPSocket accept () Method to accept incomming connection request. void monitorSocket ( TCPSocket & fd) Monitors the provided socket. void unmonitor ( TCPSocket & fd) Stops monitoring the provided socket. std::vector< TCPSocket > getSocketEvents (int timeout =10000) Gets the socket Events.","title":"Public Functions"},{"location":"PlayerLink/playerlink/Classes/classTCPServer/#additional-inherited-members","text":"Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const uint32_t getPort () const int getSocketDescriptor () const void close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance.","title":"Additional inherited members"},{"location":"PlayerLink/playerlink/Classes/classTCPServer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/playerlink/Classes/classTCPServer/#function-tcpserver","text":"TCPServer () Constructs a TCPServer object. Return :","title":"function TCPServer"},{"location":"PlayerLink/playerlink/Classes/classTCPServer/#function-listen","text":"void listen ( std :: string port , int backlog = 5 ) Listens to incoming bytes on a specified port. Parameters : port The port you wish to monitor backlog","title":"function listen"},{"location":"PlayerLink/playerlink/Classes/classTCPServer/#function-accept","text":"TCPSocket accept () Method to accept incomming connection request. Return : TCPSocket Object used to hold information and methods to send/recieve information from them","title":"function accept"},{"location":"PlayerLink/playerlink/Classes/classTCPServer/#function-monitorsocket","text":"void monitorSocket ( TCPSocket & fd ) Monitors the provided socket. Parameters : fd The File Descriptor for the socket you want to monitor","title":"function monitorSocket"},{"location":"PlayerLink/playerlink/Classes/classTCPServer/#function-unmonitor","text":"void unmonitor ( TCPSocket & fd ) Stops monitoring the provided socket. Parameters : fd The File Descriptor for the socket you no longer want to monitor","title":"function unmonitor"},{"location":"PlayerLink/playerlink/Classes/classTCPServer/#function-getsocketevents","text":"std :: vector < TCPSocket > getSocketEvents ( int timeout = 10000 ) Gets the socket Events. Parameters : timeout Return : SocketEvents in a vector Updated on 29 November 2020 at 23:16:24 UTC","title":"function getSocketEvents"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/","text":"TCPSocket TCPSocket Class extends the base socket class #include <tcpsocket.h> Inherits from Socket Public Functions Name TCPSocket (int fd) TCPSocket () bool connect (std::string address, std::string port) Connects to an address and port. bool connectWithTimeout (std::string address, std::string port, int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) Connects to an address and port with a timeout. bool canReceive (int timeout =10000) Checks if the remote machine can recieve. size_t recieve (void * buffer, size_t bufferLength) size_t recieveAll (void * buffer, size_t bufferLength) unsigned char * recieveBytes () Recieves bytes from the remote. bool setRecvTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) size_t send (void const * buffer, size_t bufferLength) size_t sendAll (void const * buffer, size_t bufferLength) bool sendBytes (unsigned char * message) Sends bytes to remote. bool setSendTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) Additional inherited members Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const uint32_t getPort () const int getSocketDescriptor () const void close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance. Public Functions Documentation function TCPSocket explicit TCPSocket ( int fd ) function TCPSocket explicit TCPSocket () function connect bool connect ( std :: string address , std :: string port ) Connects to an address and port. Parameters : address The destination address port The destination port Return : True if connection was successful and false if there was a problem function connectWithTimeout bool connectWithTimeout ( std :: string address , std :: string port , int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) Connects to an address and port with a timeout. Parameters : address The destination address port The destination port seconds The number of seconds to wait for a reply microseconds The number of microseconds to wait for a reply Return : True if connection was successful and false if there was a problem function canReceive bool canReceive ( int timeout = 10000 ) Checks if the remote machine can recieve. Parameters : timeout The number of microseconds to wait before returning false Return : True if remote is able to recieve packets and false if it can't or does not respond function recieve size_t recieve ( void * buffer , size_t bufferLength ) function recieveAll size_t recieveAll ( void * buffer , size_t bufferLength ) function recieveBytes unsigned char * recieveBytes () Recieves bytes from the remote. Return : an char* type used to hold incoming bytes function setRecvTimeout bool setRecvTimeout ( int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) function send size_t send ( void const * buffer , size_t bufferLength ) function sendAll size_t sendAll ( void const * buffer , size_t bufferLength ) function sendBytes bool sendBytes ( unsigned char * message ) Sends bytes to remote. Parameters : message The bytes in a unsigned char* Return : True if message was recieved successfully function setSendTimeout bool setSendTimeout ( int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) Updated on 29 November 2020 at 23:16:24 UTC","title":"TCPSocket"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#tcpsocket","text":"TCPSocket Class extends the base socket class #include <tcpsocket.h> Inherits from Socket","title":"TCPSocket"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#public-functions","text":"Name TCPSocket (int fd) TCPSocket () bool connect (std::string address, std::string port) Connects to an address and port. bool connectWithTimeout (std::string address, std::string port, int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) Connects to an address and port with a timeout. bool canReceive (int timeout =10000) Checks if the remote machine can recieve. size_t recieve (void * buffer, size_t bufferLength) size_t recieveAll (void * buffer, size_t bufferLength) unsigned char * recieveBytes () Recieves bytes from the remote. bool setRecvTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS) size_t send (void const * buffer, size_t bufferLength) size_t sendAll (void const * buffer, size_t bufferLength) bool sendBytes (unsigned char * message) Sends bytes to remote. bool setSendTimeout (int seconds =TIMEOUT_SECONDS, int microseconds =TIMEOUT_MICROSECONDS)","title":"Public Functions"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#additional-inherited-members","text":"Public Functions inherited from Socket Name Socket (int family, int type, int flag) Constructs a Socket object. Socket (int fd) std::string getAddress () const uint32_t getPort () const int getSocketDescriptor () const void close () Closes the connection. bool isClosed () bool setBlocking (bool swtch) Allows you to set the blocking mode for this file descriptor. int getLastError () Protected Attributes inherited from Socket Name int mSocketFD File Descriptor for this socket instance. bool socketIsClosed Flag if socket is open or closed. bool isBlocked Boolean to determine if blocking is enabled on this socket instance.","title":"Additional inherited members"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#function-tcpsocket","text":"explicit TCPSocket ( int fd )","title":"function TCPSocket"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#function-tcpsocket_1","text":"explicit TCPSocket ()","title":"function TCPSocket"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#function-connect","text":"bool connect ( std :: string address , std :: string port ) Connects to an address and port. Parameters : address The destination address port The destination port Return : True if connection was successful and false if there was a problem","title":"function connect"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#function-connectwithtimeout","text":"bool connectWithTimeout ( std :: string address , std :: string port , int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) Connects to an address and port with a timeout. Parameters : address The destination address port The destination port seconds The number of seconds to wait for a reply microseconds The number of microseconds to wait for a reply Return : True if connection was successful and false if there was a problem","title":"function connectWithTimeout"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#function-canreceive","text":"bool canReceive ( int timeout = 10000 ) Checks if the remote machine can recieve. Parameters : timeout The number of microseconds to wait before returning false Return : True if remote is able to recieve packets and false if it can't or does not respond","title":"function canReceive"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#function-recieve","text":"size_t recieve ( void * buffer , size_t bufferLength )","title":"function recieve"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#function-recieveall","text":"size_t recieveAll ( void * buffer , size_t bufferLength )","title":"function recieveAll"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#function-recievebytes","text":"unsigned char * recieveBytes () Recieves bytes from the remote. Return : an char* type used to hold incoming bytes","title":"function recieveBytes"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#function-setrecvtimeout","text":"bool setRecvTimeout ( int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS )","title":"function setRecvTimeout"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#function-send","text":"size_t send ( void const * buffer , size_t bufferLength )","title":"function send"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#function-sendall","text":"size_t sendAll ( void const * buffer , size_t bufferLength )","title":"function sendAll"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#function-sendbytes","text":"bool sendBytes ( unsigned char * message ) Sends bytes to remote. Parameters : message The bytes in a unsigned char* Return : True if message was recieved successfully","title":"function sendBytes"},{"location":"PlayerLink/playerlink/Classes/classTCPSocket/#function-setsendtimeout","text":"bool setSendTimeout ( int seconds = TIMEOUT_SECONDS , int microseconds = TIMEOUT_MICROSECONDS ) Updated on 29 November 2020 at 23:16:24 UTC","title":"function setSendTimeout"},{"location":"PlayerLink/playerlink/Classes/structDFHValues/","text":"DFHValues More... Public Attributes Name unsigned long commonPrime unsigned long secret int baseG Detailed Description struct DFHValues ; Diffie Hellman Key Exchange WIP Public Attributes Documentation variable commonPrime unsigned long commonPrime ; variable secret unsigned long secret ; variable baseG int baseG ; Updated on 29 November 2020 at 23:16:24 UTC","title":"DFHValues"},{"location":"PlayerLink/playerlink/Classes/structDFHValues/#dfhvalues","text":"More...","title":"DFHValues"},{"location":"PlayerLink/playerlink/Classes/structDFHValues/#public-attributes","text":"Name unsigned long commonPrime unsigned long secret int baseG","title":"Public Attributes"},{"location":"PlayerLink/playerlink/Classes/structDFHValues/#detailed-description","text":"struct DFHValues ; Diffie Hellman Key Exchange WIP","title":"Detailed Description"},{"location":"PlayerLink/playerlink/Classes/structDFHValues/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"PlayerLink/playerlink/Classes/structDFHValues/#variable-commonprime","text":"unsigned long commonPrime ;","title":"variable commonPrime"},{"location":"PlayerLink/playerlink/Classes/structDFHValues/#variable-secret","text":"unsigned long secret ;","title":"variable secret"},{"location":"PlayerLink/playerlink/Classes/structDFHValues/#variable-baseg","text":"int baseG ; Updated on 29 November 2020 at 23:16:24 UTC","title":"variable baseG"},{"location":"PlayerLink/playerlink/Classes/structMessage/","text":"Message Public Functions Name Message () Message (int sock_id, unsigned char * bytes) Public Attributes Name int mSockID unsigned char * mBytes Public Functions Documentation function Message inline Message () function Message inline Message ( int sock_id , unsigned char * bytes ) Public Attributes Documentation variable mSockID int mSockID ; variable mBytes unsigned char * mBytes ; Updated on 29 November 2020 at 23:16:24 UTC","title":"Message"},{"location":"PlayerLink/playerlink/Classes/structMessage/#message","text":"","title":"Message"},{"location":"PlayerLink/playerlink/Classes/structMessage/#public-functions","text":"Name Message () Message (int sock_id, unsigned char * bytes)","title":"Public Functions"},{"location":"PlayerLink/playerlink/Classes/structMessage/#public-attributes","text":"Name int mSockID unsigned char * mBytes","title":"Public Attributes"},{"location":"PlayerLink/playerlink/Classes/structMessage/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/playerlink/Classes/structMessage/#function-message","text":"inline Message ()","title":"function Message"},{"location":"PlayerLink/playerlink/Classes/structMessage/#function-message_1","text":"inline Message ( int sock_id , unsigned char * bytes )","title":"function Message"},{"location":"PlayerLink/playerlink/Classes/structMessage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"PlayerLink/playerlink/Classes/structMessage/#variable-msockid","text":"int mSockID ;","title":"variable mSockID"},{"location":"PlayerLink/playerlink/Classes/structMessage/#variable-mbytes","text":"unsigned char * mBytes ; Updated on 29 November 2020 at 23:16:24 UTC","title":"variable mBytes"},{"location":"PlayerLink/playerlink/Classes/structPlayer/","text":"Player Public Functions Name Player () Player (std::string id, std::string userName, std::string ip) Public Attributes Name std::string mID std::string mUserName std::string mIP Public Functions Documentation function Player inline Player () function Player inline Player ( std :: string id , std :: string userName , std :: string ip ) Public Attributes Documentation variable mID std :: string mID ; variable mUserName std :: string mUserName ; variable mIP std :: string mIP ; Updated on 29 November 2020 at 23:16:24 UTC","title":"Player"},{"location":"PlayerLink/playerlink/Classes/structPlayer/#player","text":"","title":"Player"},{"location":"PlayerLink/playerlink/Classes/structPlayer/#public-functions","text":"Name Player () Player (std::string id, std::string userName, std::string ip)","title":"Public Functions"},{"location":"PlayerLink/playerlink/Classes/structPlayer/#public-attributes","text":"Name std::string mID std::string mUserName std::string mIP","title":"Public Attributes"},{"location":"PlayerLink/playerlink/Classes/structPlayer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"PlayerLink/playerlink/Classes/structPlayer/#function-player","text":"inline Player ()","title":"function Player"},{"location":"PlayerLink/playerlink/Classes/structPlayer/#function-player_1","text":"inline Player ( std :: string id , std :: string userName , std :: string ip )","title":"function Player"},{"location":"PlayerLink/playerlink/Classes/structPlayer/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"PlayerLink/playerlink/Classes/structPlayer/#variable-mid","text":"std :: string mID ;","title":"variable mID"},{"location":"PlayerLink/playerlink/Classes/structPlayer/#variable-musername","text":"std :: string mUserName ;","title":"variable mUserName"},{"location":"PlayerLink/playerlink/Classes/structPlayer/#variable-mip","text":"std :: string mIP ; Updated on 29 November 2020 at 23:16:24 UTC","title":"variable mIP"},{"location":"PlayerLink/playerlink/Examples/","text":"Examples Updated on 29 November 2020 at 23:16:24 UTC","title":"Examples"},{"location":"PlayerLink/playerlink/Examples/#examples","text":"Updated on 29 November 2020 at 23:16:24 UTC","title":"Examples"},{"location":"PlayerLink/playerlink/Modules/","text":"Modules Updated on 29 November 2020 at 23:16:24 UTC","title":"Modules"},{"location":"PlayerLink/playerlink/Modules/#modules","text":"Updated on 29 November 2020 at 23:16:24 UTC","title":"Modules"},{"location":"PlayerLink/playerlink/Namespaces/","text":"Namespaces Updated on 29 November 2020 at 23:16:24 UTC","title":"Namespaces"},{"location":"PlayerLink/playerlink/Namespaces/#namespaces","text":"Updated on 29 November 2020 at 23:16:24 UTC","title":"Namespaces"}]}